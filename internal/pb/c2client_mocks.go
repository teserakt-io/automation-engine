// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2ae/internal/pb (interfaces: C2PbClient,C2PbClientFactory)

// Package pb is a generated GoMock package.
package pb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	e4common "gitlab.com/teserakt/e4common"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockC2PbClient is a mock of C2PbClient interface
type MockC2PbClient struct {
	ctrl     *gomock.Controller
	recorder *MockC2PbClientMockRecorder
}

// MockC2PbClientMockRecorder is the mock recorder for MockC2PbClient
type MockC2PbClientMockRecorder struct {
	mock *MockC2PbClient
}

// NewMockC2PbClient creates a new mock instance
func NewMockC2PbClient(ctrl *gomock.Controller) *MockC2PbClient {
	mock := &MockC2PbClient{ctrl: ctrl}
	mock.recorder = &MockC2PbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockC2PbClient) EXPECT() *MockC2PbClientMockRecorder {
	return m.recorder
}

// C2Command mocks base method
func (m *MockC2PbClient) C2Command(arg0 context.Context, arg1 *e4common.C2Request, arg2 ...grpc.CallOption) (*e4common.C2Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "C2Command", varargs...)
	ret0, _ := ret[0].(*e4common.C2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// C2Command indicates an expected call of C2Command
func (mr *MockC2PbClientMockRecorder) C2Command(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C2Command", reflect.TypeOf((*MockC2PbClient)(nil).C2Command), varargs...)
}

// Close mocks base method
func (m *MockC2PbClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockC2PbClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockC2PbClient)(nil).Close))
}

// MockC2PbClientFactory is a mock of C2PbClientFactory interface
type MockC2PbClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockC2PbClientFactoryMockRecorder
}

// MockC2PbClientFactoryMockRecorder is the mock recorder for MockC2PbClientFactory
type MockC2PbClientFactoryMockRecorder struct {
	mock *MockC2PbClientFactory
}

// NewMockC2PbClientFactory creates a new mock instance
func NewMockC2PbClientFactory(ctrl *gomock.Controller) *MockC2PbClientFactory {
	mock := &MockC2PbClientFactory{ctrl: ctrl}
	mock.recorder = &MockC2PbClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockC2PbClientFactory) EXPECT() *MockC2PbClientFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockC2PbClientFactory) Create() (C2PbClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(C2PbClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockC2PbClientFactoryMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockC2PbClientFactory)(nil).Create))
}
