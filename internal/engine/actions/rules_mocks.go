// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2ae/internal/engine/actions (interfaces: ActionFactory,Action)

// Package actions is a generated GoMock package.
package actions

import (
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/teserakt/c2ae/internal/models"
	reflect "reflect"
)

// MockActionFactory is a mock of ActionFactory interface
type MockActionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockActionFactoryMockRecorder
}

// MockActionFactoryMockRecorder is the mock recorder for MockActionFactory
type MockActionFactoryMockRecorder struct {
	mock *MockActionFactory
}

// NewMockActionFactory creates a new mock instance
func NewMockActionFactory(ctrl *gomock.Controller) *MockActionFactory {
	mock := &MockActionFactory{ctrl: ctrl}
	mock.recorder = &MockActionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActionFactory) EXPECT() *MockActionFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockActionFactory) Create(arg0 models.Rule) (Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockActionFactoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockActionFactory)(nil).Create), arg0)
}

// MockAction is a mock of Action interface
type MockAction struct {
	ctrl     *gomock.Controller
	recorder *MockActionMockRecorder
}

// MockActionMockRecorder is the mock recorder for MockAction
type MockActionMockRecorder struct {
	mock *MockAction
}

// NewMockAction creates a new mock instance
func NewMockAction(ctrl *gomock.Controller) *MockAction {
	mock := &MockAction{ctrl: ctrl}
	mock.recorder = &MockActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAction) EXPECT() *MockActionMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockAction) Execute() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute")
}

// Execute indicates an expected call of Execute
func (mr *MockActionMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAction)(nil).Execute))
}
