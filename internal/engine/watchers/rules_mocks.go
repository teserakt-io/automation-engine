// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2ae/internal/engine/watchers (interfaces: RuleWatcherFactory,RuleWatcher)

// Package watchers is a generated GoMock package.
package watchers

import (
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/teserakt/c2ae/internal/models"
	reflect "reflect"
)

// MockRuleWatcherFactory is a mock of RuleWatcherFactory interface
type MockRuleWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRuleWatcherFactoryMockRecorder
}

// MockRuleWatcherFactoryMockRecorder is the mock recorder for MockRuleWatcherFactory
type MockRuleWatcherFactoryMockRecorder struct {
	mock *MockRuleWatcherFactory
}

// NewMockRuleWatcherFactory creates a new mock instance
func NewMockRuleWatcherFactory(ctrl *gomock.Controller) *MockRuleWatcherFactory {
	mock := &MockRuleWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockRuleWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuleWatcherFactory) EXPECT() *MockRuleWatcherFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRuleWatcherFactory) Create(arg0 models.Rule) RuleWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(RuleWatcher)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRuleWatcherFactoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRuleWatcherFactory)(nil).Create), arg0)
}

// MockRuleWatcher is a mock of RuleWatcher interface
type MockRuleWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockRuleWatcherMockRecorder
}

// MockRuleWatcherMockRecorder is the mock recorder for MockRuleWatcher
type MockRuleWatcherMockRecorder struct {
	mock *MockRuleWatcher
}

// NewMockRuleWatcher creates a new mock instance
func NewMockRuleWatcher(ctrl *gomock.Controller) *MockRuleWatcher {
	mock := &MockRuleWatcher{ctrl: ctrl}
	mock.recorder = &MockRuleWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuleWatcher) EXPECT() *MockRuleWatcherMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockRuleWatcher) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockRuleWatcherMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRuleWatcher)(nil).Start))
}

// Stop mocks base method
func (m *MockRuleWatcher) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockRuleWatcherMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRuleWatcher)(nil).Stop))
}
