// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teserakt-io/automation-engine/internal/engine/watchers (interfaces: RuleWatcher)

// Package watchers is a generated GoMock package.
package watchers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRuleWatcher is a mock of RuleWatcher interface
type MockRuleWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockRuleWatcherMockRecorder
}

// MockRuleWatcherMockRecorder is the mock recorder for MockRuleWatcher
type MockRuleWatcherMockRecorder struct {
	mock *MockRuleWatcher
}

// NewMockRuleWatcher creates a new mock instance
func NewMockRuleWatcher(ctrl *gomock.Controller) *MockRuleWatcher {
	mock := &MockRuleWatcher{ctrl: ctrl}
	mock.recorder = &MockRuleWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuleWatcher) EXPECT() *MockRuleWatcherMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockRuleWatcher) Start(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start
func (mr *MockRuleWatcherMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRuleWatcher)(nil).Start), arg0)
}
