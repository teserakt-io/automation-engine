// Copyright 2020 Teserakt AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teserakt-io/automation-engine/internal/engine/watchers (interfaces: TriggerWatcher)

// Package watchers is a generated GoMock package.
package watchers

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockTriggerWatcher is a mock of TriggerWatcher interface
type MockTriggerWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerWatcherMockRecorder
}

// MockTriggerWatcherMockRecorder is the mock recorder for MockTriggerWatcher
type MockTriggerWatcherMockRecorder struct {
	mock *MockTriggerWatcher
}

// NewMockTriggerWatcher creates a new mock instance
func NewMockTriggerWatcher(ctrl *gomock.Controller) *MockTriggerWatcher {
	mock := &MockTriggerWatcher{ctrl: ctrl}
	mock.recorder = &MockTriggerWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTriggerWatcher) EXPECT() *MockTriggerWatcherMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockTriggerWatcher) Start(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start
func (mr *MockTriggerWatcherMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTriggerWatcher)(nil).Start), arg0)
}

// UpdateLastExecuted mocks base method
func (m *MockTriggerWatcher) UpdateLastExecuted(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastExecuted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastExecuted indicates an expected call of UpdateLastExecuted
func (mr *MockTriggerWatcherMockRecorder) UpdateLastExecuted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastExecuted", reflect.TypeOf((*MockTriggerWatcher)(nil).UpdateLastExecuted), arg0)
}
