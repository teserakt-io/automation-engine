// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2ae/internal/engine/watchers (interfaces: TriggerWatcherFactory,RuleWatcherFactory)

// Package watchers is a generated GoMock package.
package watchers

import (
	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/teserakt/c2ae/internal/models"
	reflect "reflect"
	time "time"
)

// MockTriggerWatcherFactory is a mock of TriggerWatcherFactory interface
type MockTriggerWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerWatcherFactoryMockRecorder
}

// MockTriggerWatcherFactoryMockRecorder is the mock recorder for MockTriggerWatcherFactory
type MockTriggerWatcherFactoryMockRecorder struct {
	mock *MockTriggerWatcherFactory
}

// NewMockTriggerWatcherFactory creates a new mock instance
func NewMockTriggerWatcherFactory(ctrl *gomock.Controller) *MockTriggerWatcherFactory {
	mock := &MockTriggerWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockTriggerWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTriggerWatcherFactory) EXPECT() *MockTriggerWatcherFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTriggerWatcherFactory) Create(arg0 models.Trigger, arg1 []models.Target, arg2 time.Time, arg3 chan<- TriggerEvent, arg4 chan<- error) (TriggerWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(TriggerWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTriggerWatcherFactoryMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTriggerWatcherFactory)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// MockRuleWatcherFactory is a mock of RuleWatcherFactory interface
type MockRuleWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockRuleWatcherFactoryMockRecorder
}

// MockRuleWatcherFactoryMockRecorder is the mock recorder for MockRuleWatcherFactory
type MockRuleWatcherFactoryMockRecorder struct {
	mock *MockRuleWatcherFactory
}

// NewMockRuleWatcherFactory creates a new mock instance
func NewMockRuleWatcherFactory(ctrl *gomock.Controller) *MockRuleWatcherFactory {
	mock := &MockRuleWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockRuleWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuleWatcherFactory) EXPECT() *MockRuleWatcherFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRuleWatcherFactory) Create(arg0 models.Rule) RuleWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(RuleWatcher)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRuleWatcherFactoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRuleWatcherFactory)(nil).Create), arg0)
}
