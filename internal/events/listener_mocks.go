// Copyright 2020 Teserakt AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teserakt-io/automation-engine/internal/events (interfaces: StreamListenerFactory,StreamListener)

// Package events is a generated GoMock package.
package events

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/teserakt-io/automation-engine/internal/pb"
	pb0 "github.com/teserakt-io/c2/pkg/pb"
	reflect "reflect"
)

// MockStreamListenerFactory is a mock of StreamListenerFactory interface
type MockStreamListenerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockStreamListenerFactoryMockRecorder
}

// MockStreamListenerFactoryMockRecorder is the mock recorder for MockStreamListenerFactory
type MockStreamListenerFactoryMockRecorder struct {
	mock *MockStreamListenerFactory
}

// NewMockStreamListenerFactory creates a new mock instance
func NewMockStreamListenerFactory(ctrl *gomock.Controller) *MockStreamListenerFactory {
	mock := &MockStreamListenerFactory{ctrl: ctrl}
	mock.recorder = &MockStreamListenerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamListenerFactory) EXPECT() *MockStreamListenerFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStreamListenerFactory) Create(arg0 int, arg1 ...pb.EventType) StreamListener {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(StreamListener)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStreamListenerFactoryMockRecorder) Create(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStreamListenerFactory)(nil).Create), varargs...)
}

// MockStreamListener is a mock of StreamListener interface
type MockStreamListener struct {
	ctrl     *gomock.Controller
	recorder *MockStreamListenerMockRecorder
}

// MockStreamListenerMockRecorder is the mock recorder for MockStreamListener
type MockStreamListenerMockRecorder struct {
	mock *MockStreamListener
}

// NewMockStreamListener creates a new mock instance
func NewMockStreamListener(ctrl *gomock.Controller) *MockStreamListener {
	mock := &MockStreamListener{ctrl: ctrl}
	mock.recorder = &MockStreamListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamListener) EXPECT() *MockStreamListenerMockRecorder {
	return m.recorder
}

// C mocks base method
func (m *MockStreamListener) C() <-chan pb0.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(<-chan pb0.Event)
	return ret0
}

// C indicates an expected call of C
func (mr *MockStreamListenerMockRecorder) C() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockStreamListener)(nil).C))
}

// Close mocks base method
func (m *MockStreamListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStreamListenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamListener)(nil).Close))
}

// onEvent mocks base method
func (m *MockStreamListener) onEvent(arg0 pb0.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onEvent", arg0)
}

// onEvent indicates an expected call of onEvent
func (mr *MockStreamListenerMockRecorder) onEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onEvent", reflect.TypeOf((*MockStreamListener)(nil).onEvent), arg0)
}
