// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/teserakt/c2ae/internal/models (interfaces: Validator,TriggerValidator)

// Package models is a generated GoMock package.
package models

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ValidateRule mocks base method
func (m *MockValidator) ValidateRule(arg0 Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRule indicates an expected call of ValidateRule
func (mr *MockValidatorMockRecorder) ValidateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRule", reflect.TypeOf((*MockValidator)(nil).ValidateRule), arg0)
}

// ValidateTarget mocks base method
func (m *MockValidator) ValidateTarget(arg0 Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTarget", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTarget indicates an expected call of ValidateTarget
func (mr *MockValidatorMockRecorder) ValidateTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTarget", reflect.TypeOf((*MockValidator)(nil).ValidateTarget), arg0)
}

// ValidateTrigger mocks base method
func (m *MockValidator) ValidateTrigger(arg0 Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTrigger", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTrigger indicates an expected call of ValidateTrigger
func (mr *MockValidatorMockRecorder) ValidateTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTrigger", reflect.TypeOf((*MockValidator)(nil).ValidateTrigger), arg0)
}

// MockTriggerValidator is a mock of TriggerValidator interface
type MockTriggerValidator struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerValidatorMockRecorder
}

// MockTriggerValidatorMockRecorder is the mock recorder for MockTriggerValidator
type MockTriggerValidatorMockRecorder struct {
	mock *MockTriggerValidator
}

// NewMockTriggerValidator creates a new mock instance
func NewMockTriggerValidator(ctrl *gomock.Controller) *MockTriggerValidator {
	mock := &MockTriggerValidator{ctrl: ctrl}
	mock.recorder = &MockTriggerValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTriggerValidator) EXPECT() *MockTriggerValidatorMockRecorder {
	return m.recorder
}

// ValidateTrigger mocks base method
func (m *MockTriggerValidator) ValidateTrigger(arg0 Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTrigger", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateTrigger indicates an expected call of ValidateTrigger
func (mr *MockTriggerValidatorMockRecorder) ValidateTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTrigger", reflect.TypeOf((*MockTriggerValidator)(nil).ValidateTrigger), arg0)
}
