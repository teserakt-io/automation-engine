// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teserakt-io/automation-engine/internal/models (interfaces: Converter)

// Package models is a generated GoMock package.
package models

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/teserakt-io/automation-engine/internal/pb"
	reflect "reflect"
)

// MockConverter is a mock of Converter interface
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// PbToRule mocks base method
func (m *MockConverter) PbToRule(arg0 *pb.Rule) (Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PbToRule", arg0)
	ret0, _ := ret[0].(Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PbToRule indicates an expected call of PbToRule
func (mr *MockConverterMockRecorder) PbToRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PbToRule", reflect.TypeOf((*MockConverter)(nil).PbToRule), arg0)
}

// PbToRules mocks base method
func (m *MockConverter) PbToRules(arg0 []*pb.Rule) ([]Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PbToRules", arg0)
	ret0, _ := ret[0].([]Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PbToRules indicates an expected call of PbToRules
func (mr *MockConverterMockRecorder) PbToRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PbToRules", reflect.TypeOf((*MockConverter)(nil).PbToRules), arg0)
}

// PbToTarget mocks base method
func (m *MockConverter) PbToTarget(arg0 *pb.Target) (Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PbToTarget", arg0)
	ret0, _ := ret[0].(Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PbToTarget indicates an expected call of PbToTarget
func (mr *MockConverterMockRecorder) PbToTarget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PbToTarget", reflect.TypeOf((*MockConverter)(nil).PbToTarget), arg0)
}

// PbToTargets mocks base method
func (m *MockConverter) PbToTargets(arg0 []*pb.Target) ([]Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PbToTargets", arg0)
	ret0, _ := ret[0].([]Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PbToTargets indicates an expected call of PbToTargets
func (mr *MockConverterMockRecorder) PbToTargets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PbToTargets", reflect.TypeOf((*MockConverter)(nil).PbToTargets), arg0)
}

// PbToTrigger mocks base method
func (m *MockConverter) PbToTrigger(arg0 *pb.Trigger) (Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PbToTrigger", arg0)
	ret0, _ := ret[0].(Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PbToTrigger indicates an expected call of PbToTrigger
func (mr *MockConverterMockRecorder) PbToTrigger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PbToTrigger", reflect.TypeOf((*MockConverter)(nil).PbToTrigger), arg0)
}

// PbToTriggers mocks base method
func (m *MockConverter) PbToTriggers(arg0 []*pb.Trigger) ([]Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PbToTriggers", arg0)
	ret0, _ := ret[0].([]Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PbToTriggers indicates an expected call of PbToTriggers
func (mr *MockConverterMockRecorder) PbToTriggers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PbToTriggers", reflect.TypeOf((*MockConverter)(nil).PbToTriggers), arg0)
}

// RuleToPb mocks base method
func (m *MockConverter) RuleToPb(arg0 Rule) (*pb.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuleToPb", arg0)
	ret0, _ := ret[0].(*pb.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RuleToPb indicates an expected call of RuleToPb
func (mr *MockConverterMockRecorder) RuleToPb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuleToPb", reflect.TypeOf((*MockConverter)(nil).RuleToPb), arg0)
}

// RulesToPb mocks base method
func (m *MockConverter) RulesToPb(arg0 []Rule) ([]*pb.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RulesToPb", arg0)
	ret0, _ := ret[0].([]*pb.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RulesToPb indicates an expected call of RulesToPb
func (mr *MockConverterMockRecorder) RulesToPb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RulesToPb", reflect.TypeOf((*MockConverter)(nil).RulesToPb), arg0)
}

// TargetToPb mocks base method
func (m *MockConverter) TargetToPb(arg0 Target) (*pb.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetToPb", arg0)
	ret0, _ := ret[0].(*pb.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TargetToPb indicates an expected call of TargetToPb
func (mr *MockConverterMockRecorder) TargetToPb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetToPb", reflect.TypeOf((*MockConverter)(nil).TargetToPb), arg0)
}

// TargetsToPb mocks base method
func (m *MockConverter) TargetsToPb(arg0 []Target) ([]*pb.Target, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetsToPb", arg0)
	ret0, _ := ret[0].([]*pb.Target)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TargetsToPb indicates an expected call of TargetsToPb
func (mr *MockConverterMockRecorder) TargetsToPb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetsToPb", reflect.TypeOf((*MockConverter)(nil).TargetsToPb), arg0)
}

// TriggerToPb mocks base method
func (m *MockConverter) TriggerToPb(arg0 Trigger) (*pb.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerToPb", arg0)
	ret0, _ := ret[0].(*pb.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerToPb indicates an expected call of TriggerToPb
func (mr *MockConverterMockRecorder) TriggerToPb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerToPb", reflect.TypeOf((*MockConverter)(nil).TriggerToPb), arg0)
}

// TriggersToPb mocks base method
func (m *MockConverter) TriggersToPb(arg0 []Trigger) ([]*pb.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggersToPb", arg0)
	ret0, _ := ret[0].([]*pb.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggersToPb indicates an expected call of TriggersToPb
func (mr *MockConverterMockRecorder) TriggersToPb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggersToPb", reflect.TypeOf((*MockConverter)(nil).TriggersToPb), arg0)
}
